package com.hanwang.restful.service.impl;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.hanwang.restful.entity.User;import com.hanwang.restful.mapper.UserMapper;import com.hanwang.restful.service.UserService;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.stereotype.Service;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.apache.commons.lang3.StringUtils;import java.util.List;/** * <p> * 用户信息表 服务实现类 * </p> * * @author gadfly * @since 2019-12-20 */@Service@Transactionalpublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {	@Autowired	private UserMapper userMapper;	@Override	public IPage<User> selectPage(IPage<User> page, User user){		return userMapper.selectPage(page, getEntityWrapper(user));	}	@Override	public List<User> selectList(User user){		return userMapper.selectList(getEntityWrapper(user));	}	@Override	public User getById(String id){		return userMapper.selectById(id);	}	@Override	public User saveById(User user){		userMapper.updateById(user);		return user;	}	@Override	public User add(User user){		userMapper.insert(user);		return user;	}	@Override	public Boolean removeById(String id){		return (userMapper.deleteById(id) > 0) ? true : false;	}	/**	 *  公共查询条件	 * @param user	 * @return	 */	public QueryWrapper<User> getEntityWrapper(User user){		QueryWrapper wrapper = new QueryWrapper();		//条件拼接		if(StringUtils.isNotBlank(user.getRealname().toString())){			wrapper.like(User.REALNAME, user.getRealname().toString());		}		if(StringUtils.isNotBlank(user.getMobile().toString())){			wrapper.like(User.MOBILE, user.getMobile().toString());		}		if(StringUtils.isNotBlank(user.getEmail().toString())){			wrapper.like(User.EMAIL, user.getEmail().toString());		}		if(StringUtils.isNotBlank(user.getPublicKey().toString())){			wrapper.like(User.PUBLIC_KEY, user.getPublicKey().toString());		}		if(StringUtils.isNotBlank(user.getPrivateKey().toString())){			wrapper.like(User.PRIVATE_KEY, user.getPrivateKey().toString());		}		if(StringUtils.isNotBlank(user.getInsertTime().toString())){			wrapper.like(User.INSERT_TIME, user.getInsertTime().toString());		}		if(StringUtils.isNotBlank(user.getModifyTime().toString())){			wrapper.like(User.MODIFY_TIME, user.getModifyTime().toString());		}		return wrapper;	}}